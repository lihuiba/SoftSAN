option py_generic_services = false;
message Guid {
    required fixed32 a=1;
    required fixed32 b=2;
    required fixed32 c=3;
    required fixed32 d=4;
}

message Header {
    required uint32 token=1;
    required Guid caller=2;      // the initial caller
    required bool isRequest=3;
    optional string method=4;
    optional bytes argument=5;
    optional bytes ret=6;
    optional uint32 errorno=7;
}

message ChunkInfo {
    required Guid guid=1;
    required uint32 size=2;    //in MB
//    optional uint32 reside_on_disk=3;
}

message SMARTInfo {
    message Record {
        required uint32 flag=1;
        required uint32 value=2;
        required uint32 worst=3;
        required uint32 thresh=4;
        required string type=5;                 //todo
        required string updated=6;              //todo
        required string when_failed=7;          //todo
        required uint32 raw_value=8;            //todo
    }
    optional Record Raw_Read_Error_Rate        =1;
    optional Record Spin_Up_Time        =3;
    optional Record Start_Stop_Count        =4;
    optional Record Reallocated_Sector_Ct    =5;
    optional Record Seek_Error_Rate        =7;
    optional Record Power_On_Hours        =9;
    optional Record Spin_Retry_Count        =10;
    optional Record Calibration_Retry_Count    =11;
    optional Record Power_Cycle_Count        =12;
    optional Record PowerOff_Retract_Count    =192;
    optional Record Load_Cycle_Count        =193;
    optional Record Temperature_Celsius        =194;    //in celsius degree
    optional Record Reallocated_Event_Count    =196;
    optional Record Current_Pending_Sector    =197;
    optional Record Offline_Uncorrectable    =198;
    optional Record UDMA_CRC_Error_Count    =199;
    optional Record Multi_Zone_Error_Rate    =200;    
/*
  1 Raw_Read_Error_Rate     0x000f   200   200   051    Pre-fail  Always       -       0
  3 Spin_Up_Time            0x0003   178   169   021    Pre-fail  Always       -       6066
  4 Start_Stop_Count        0x0032   100   100   000    Old_age   Always       -       212
  5 Reallocated_Sector_Ct   0x0033   200   200   140    Pre-fail  Always       -       0
  7 Seek_Error_Rate         0x000e   100   253   051    Old_age   Always       -       0
  9 Power_On_Hours          0x0032   058   058   000    Old_age   Always       -       30815
 10 Spin_Retry_Count        0x0012   100   100   051    Old_age   Always       -       0
 11 Calibration_Retry_Count 0x0012   100   100   051    Old_age   Always       -       0
 12 Power_Cycle_Count       0x0032   100   100   000    Old_age   Always       -       211
192 Power-Off_Retract_Count 0x0032   200   200   000    Old_age   Always       -       190
193 Load_Cycle_Count        0x0032   200   200   000    Old_age   Always       -       224
194 Temperature_Celsius     0x0022   107   095   000    Old_age   Always       -       43
196 Reallocated_Event_Count 0x0032   200   200   000    Old_age   Always       -       0
197 Current_Pending_Sector  0x0012   200   200   000    Old_age   Always       -       0
198 Offline_Uncorrectable   0x0010   200   200   000    Old_age   Offline      -       0
199 UDMA_CRC_Error_Count    0x003e   200   200   000    Old_age   Always       -       0
200 Multi_Zone_Error_Rate   0x0008   200   200   051    Old_age   Offline      -       0
*/
    optional string smartctl_all=1000;
}

message DiskInfo {
    optional string id=1;
    optional Guid guid=2;
    required uint32 size=3;    //in GB
    required uint32 free=4;    //in GB
    required uint32 number_chunks=5;
    optional bool isSSD=6;
    optional SMARTInfo smart=7;
}

message MachineInfo {
    required uint32 cpu_sockets=1;
    required uint32 cpu_cores=2;
    required uint32 cpu_threads=3;
    required uint32 memory=4;    //in GB
    optional string uname_a=5;
}

message LoadInfo{

}

message ChunkServerInfo {
    required Guid guid=1;
    optional MachineInfo machine=2;
    repeated DiskInfo disks=3;
    repeated ChunkInfo chunks=4;
    optional LoadInfo load=5;
}

message NewChunk_Request {
    required uint32 size=1;                 //in MB
    optional Guid location=2;               //target server guid, or (0,0,0,0) for any location
}

message NewChunk_Response {
    required uint32 size=1;                 //size of the created chunk
    required Guid guid=2;                   //guid of the created chunk
    optional string error=101;
}

message DeleteChunk_Request {
    required Guid guid=1;
}

message DeleteChunk_Response {
    required Guid guid=1;
    optional string error=101;
}

message Volume {
    optional Guid chunk=100;                //A volume is either a chunk,
    repeated Volume subvolumes=1;           //or a list of sub-volumes
    optional string assembler=2;            //that is assembled by an assembler.
    required uint64 size=3;                 //in MB
}

message VolumePackage {
    required bytes volume=1;
}

message ReadVolume_Request {
    required string fullpath=1;
}

message ReadVolume_Response {
    required Volume volume=2;
}

message WriteVolume_Request {
    required string fullpath=1;
    required Volume volume=2;
}

message WriteVolume_Response {
    optional string error=101;
}

message NewVolume_Request {
    required string fullpath=1;
    required uint32 mod=2;
    optional Volume volume=3;
}

message NewVolume_Response {
    optional string error=101;
}

message ChMod_Request {
    required string fullpath=1;
    required uint32 mod=2;
}

message ChMod_Response {
    optional string error=101;
}

//also used to "assemble" (active) a single chunk
message AssembleVolume_Request {
    required Volume volume=1;
}

message AssembleVolume_Response {
    required string access_point=1;
    repeated string APs=2;               // all the access points, if results in more than one.
    optional string error=101;
}

message DisassembleVolume_Request {
    required string access_point=1;
}

message DisassembleVolume_Response {
    required string access_point=1;
    optional string error=101;
}

message RepairVolume_Request {
}

message RepairVolume_Response {
}

message MoveVolume_Request {
    required string volume=1;
    required string destination=2;
}

message MoveVolume_Response {
    optional string error=101;
}

message DeleteVolume_Request {
    optional uint32 token=100;
    required string volume=1;
}

message DeleteVolume_Response {
    optional string error=101;
}

message CreateLink_Request {
    required string destination=1;
    required string link=2;
}

message CreateLink_Response {
    optional string error=101;
}


service MDSService {
    rpc NewChunk(NewChunk_Request)                   returns (NewChunk_Response);
    rpc DeleteChunk(DeleteChunk_Request)             returns (DeleteChunk_Response);
    rpc NewVolume(NewVolume_Request)                 returns(NewVolume_Response);
    rpc AssembleVolume(AssembleVolume_Request)       returns (AssembleVolume_Response);
    rpc DisassembleVolume(DisassembleVolume_Request) returns (DisassembleVolume_Response);
    rpc RepairVolume(RepairVolume_Request)           returns (RepairVolume_Response);
    rpc ReadVolume(ReadVolume_Request)               returns(ReadVolume_Response);
    rpc WriteVolume(WriteVolume_Request)             returns(WriteVolume_Response);
    rpc MoveVolume(MoveVolume_Request)               returns(MoveVolume_Response);
    rpc ChMod(ChMod_Request)                         returns(ChMod_Response);
    rpc DeleteVolume(DeleteVolume_Request)           returns(DeleteVolume_Response);
    rpc CreateLinK(CreateLink_Request)               returns(CreateLink_Response);
}
